/*! Universal Router | MIT License | https://www.kriasoft.com/universal-router/ */

'use strict';

var pathToRegexp = require('path-to-regexp');

function cacheRoutes(routesByName, route, routes) {
  if (route.name && routesByName.has(route.name)) {
    throw new Error("Route \"" + route.name + "\" already exists");
  }

  if (route.name) {
    routesByName.set(route.name, route);
  }

  if (routes) {
    for (var i = 0; i < routes.length; i++) {
      var childRoute = routes[i];
      childRoute.parent = route;
      cacheRoutes(routesByName, childRoute, childRoute.children);
    }
  }
}

function generateUrls(router, options) {
  if (!router) {
    throw new ReferenceError('Router is not defined');
  }

  var routesByName = new Map();
  var regexpByRoute = new Map();
  var opts = Object.assign({
    encode: encodeURIComponent
  }, options);
  return function (routeName, params) {
    var route = routesByName.get(routeName);

    if (!route) {
      routesByName.clear();
      regexpByRoute.clear();
      cacheRoutes(routesByName, router.root, router.root.children);
      route = routesByName.get(routeName);

      if (!route) {
        throw new Error("Route \"" + routeName + "\" not found");
      }
    }

    var regexp = regexpByRoute.get(route);

    if (!regexp) {
      var fullPath = '';
      var rt = route;

      while (rt) {
        var path = Array.isArray(rt.path) ? rt.path[0] : rt.path;

        if (path) {
          fullPath = path + fullPath;
        }

        rt = rt.parent;
      }

      var tokens = pathToRegexp.parse(fullPath, opts);
      var toPath = pathToRegexp.tokensToFunction(tokens, opts);
      var keys = Object.create(null);

      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token !== 'string') {
          keys[token.name] = true;
        }
      }

      regexp = {
        toPath: toPath,
        keys: keys
      };
      regexpByRoute.set(route, regexp);
    }

    var url = router.baseUrl + regexp.toPath(params) || '/';

    if (opts.stringifyQueryParams && params) {
      var queryParams = {};

      var _keys = Object.keys(params);

      for (var _i = 0; _i < _keys.length; _i++) {
        var key = _keys[_i];

        if (!regexp.keys[key]) {
          queryParams[key] = params[key];
        }
      }

      var query = opts.stringifyQueryParams(queryParams);

      if (query) {
        url += query.charAt(0) === '?' ? query : "?" + query;
      }
    }

    return url;
  };
}

module.exports = generateUrls;
//# sourceMappingURL=index.js.map
